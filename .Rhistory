library(roxygen2)
usethis::use_gpl3_license()
library(jackknifeplus)
qt(0.025,196,lower.tail = FALSE)
qt(0.025,196,lower.tail = TRUE)
n = 100
p = 10
Xtrain = matrix(rnorm(n*p),n,p)
Ytrain = rnorm(n)
Xtest = rnorm(p)
Ytest = rnorm(1)
lm(Ytrain~Xtrain)
Ytest = rnorm(1)
Results = lm(Ytrain~Xtrain)
Results$coefficients
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
DLLInfo
library(jackknifeplus)
pkgbuild::compile_dll()
devtools::document()
warnings()
library(jackknifeplus)
warnings()
devtools::document()
warnings()
devtools::document()
GNU General Public License
==========================
predY_LR = function(Xtrain, Ytrain, Xtest){
return(Xtest%*%lm(Ytrain~Xtrain)$coefficients)
}
#(-q_n_a(-q1),q_n_a(q2))
jackknife <- function(Xtrain, Ytrain, Xtest, Ytest, predfunction){#要有trainfunction, 还要把train function的参数传到test function，并且test function返回\hat{Y}.
for (i in 1:n) {
predY = predfunction(Xtrain[1:i-1,]+Xtrain[i+1:n,],Ytrain[1:i-1]+Ytrain[i+1,n],Xtrain[i,])#trainfunction
Results_RLOO[i] = abs(Ytrain[i] - predY)
q1[i] = predfunction(Xtrain[1:i-1,]+Xtrain[i+1:n,],Ytrain[1:i-1]+Ytrain[i+1,n],Xtest) - Results_RLOO[i]
q2[i] = predfunction(Xtrain[1:i-1,]+Xtrain[i+1:n,],Ytrain[1:i-1]+Ytrain[i+1,n],Xtest) + Results_RLOO[i]
print(q1)
print(q2)
}
}
10:1.sort()
c(10:1).sort()
a = 10:1
a
a.sort()
a.sort
sort(a)
sort(a)[1]
sort(a)[2]
quantile_n_a = function(A, a){
n = length(A)
return(sort(A)[ceiling((1-a)*(n+1))])
}
quantile_n_a(10:1,4)
quantile_n_a(10:1,0.05)
ceiling((1-a)*(n+1))
ceiling((1-0.05)*(n+1))
ceiling((1-0.05)*(10+1))
0.95*11
matrix(1:12,3,4)
B = matrix(1:12,3,4)
B[-1,]
B
C = 1:10
C[-1]
library(jackknifeplus)
devtools::document()
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
devtools::document()
library(jackknifeplus)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
library(jackknifeplus)
getwd
getwd()
list.files()
file.path(R.home(), "bin/x64")
Rcpp:::LdFlags()
use_rcpp_armadillo()
usethis::use_rcpp_armadillo()
devtools::document
devtools::document()
library(jackknifeplus)
use_gpl3_license()
usethis::use_gpl3_license()
Rcpp::sourceCpp("src/jackknifeplus.cpp")
jackknife_c_wrapper <- function(Xtrain, Ytrain, Xtest, a) {
n <- nrow(Xtrain)
result = jackknife_c(Xtrain,Ytrain ,Xtest)
q1 = result$q1
q2 = result$q2
interval <- c(sort(q1)[floor(a*(n+1))], sort(q2)[ceiling((1-a)*(n+1))])
return(interval)
}
jackknife_c_wrapper(Xtrain, Ytrain, Xtest, 0.05)
Xtrain=matrix(rnorm(200),40,5)
Ytrain=matrix(rnorm(40),40,1)
Xtest=matrix(rnorm(5),1,5)
jackknife_c_wrapper(Xtrain, Ytrain, Xtest, 0.05)
Xtrain=matrix(rnorm(200),40,5)
Ytrain=matrix(rnorm(40),40,1)
Xtest=matrix(rnorm(5),1,5)
jackknife_c_wrapper(Xtrain, Ytrain, Xtest, 0.05)
Rcpp::compileAttributes()
library(jackknifeplus)
library(jackknifeplus)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
Rcpp::sourceCpp("src/jackknifeplus.cpp")
jackknife_c_wrapper <- function(Xtrain, Ytrain, Xtest, a) {
n <- nrow(Xtrain)
result <- jackknife_c(Xtrain, Ytrain, Xtest) # Use c code
q1 <- result$q1
q2 <- result$q2
interval <- c(sort(q1)[floor(a * (n + 1))], sort(q2)[ceiling((1 - a) * (n + 1))]) # Calculte interval
return(interval)
}
jackknife_c_wrapper(Xtrain, Ytrain, Xtest, 0.05)
jackknifeplus_c_wrapper <- function(Xtrain, Ytrain, Xtest, a) {
n <- nrow(Xtrain)
result <- jackknifeplus_c(Xtrain, Ytrain, Xtest) # Use C code
q1 <- result$q1
q2 <- result$q2
interval <- c(sort(q1)[floor(a * (n + 1))], sort(q2)[ceiling((1 - a) * (n + 1))]) # Calculate interval
return(interval)
}
Xtrain=matrix(rnorm(200),40,5)
Ytrain=matrix(rnorm(40),40,1)
Xtest=matrix(rnorm(5),1,5)
jackknife_c_wrapper(Xtrain, Ytrain, Xtest, 0.05)
jackknifeplus_c_wrapper(Xtrain, Ytrain, Xtest, 0.05)
# jackknife CV+
jackknifeplusCV_c_wrapper <- function(Xtrain, Ytrain, Xtest, a, K) {
n <- nrow(Xtrain) # number of total data
m <- n %/% K # number of data in every folder
result <- jackknifeplusCV_c(Xtrain, Ytrain, Xtest, K) # Use C code
q1 <- result$q1
q2 <- result$q2
interval <- c(sort(q1)[floor(a * (K * m + 1))], sort(q2)[ceiling((1 - a) * (K * m + 1))]) # Calculate interval
return(interval)
}
jackknifeplusCV_c_wrapper(Xtrain, Ytrain, Xtest, 0.05, 4)
jackknifeplusMM_c_wrapper <- function(Xtrain, Ytrain, Xtest, a) {
n <- nrow(Xtrain)
result <- jackknifeplusMM_c(Xtrain, Ytrain, Xtest) # Use C code
# Calculate interval
left <- min(result$Results_LOOtest - sort(result$Results_RLOO)[ceiling((1 - a) * (n + 1))])
right <- max(result$Results_LOOtest + sort(result$Results_RLOO)[ceiling((1 - a) * (n + 1))])
interval <- c(left, right)
return(interval)
}
jackknifeplusMM_c_wrapper(Xtrain, Ytrain, Xtest, 0.05)
